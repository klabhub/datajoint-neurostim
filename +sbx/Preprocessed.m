%{
# A complete preprocessed data set of the SBX data obtained in a single session.
-> ns.Session
-> sbx.PrepParms
---
folder : varchar(1024)      # Folder with the preprocessing results
img    : longblob           # Mean image
nrframesinsession : int     # Total number of frames in the session.
framerate : double          # Acquisition framerate
%}
%
% If the environment variable NS_CONDA is set to point to a conda
% installation, then the preprocessing runs OutOfProcess (i.e. using a
% system call to start Python outside Matlab). Otherwise, the Python calls
% are done InProcess, using the PythonEnvironment that is linked to Matlab.
% (This latter option is faster to startup, but runs the risk of
% conflicting libraries).
%
% With suite2p preprocessing, the fast_disk option can be set in PrepParms,
% but if it is not set (i.e. empty) and delete_bin is true (i.e. the
% temporary bin file is not kept), then a tempdir (presumably on a fast
% local disk) will be used. 
classdef Preprocessed < dj.Imported
    properties (Dependent)
        keySource
        ops
        stat
    end
    methods
        function v = get.keySource(~)
            % Restrict to sessions that have sbx file
            v =(ns.Session & (ns.File & 'extension=''.sbx'''))*sbx.PrepParms;
        end

        function v =  get.ops(tbl)
            % Retrieve the parameters used by suite2p
            keyCntr = 0;
            for key =fetch(tbl*sbx.PrepParms,'*')
                keyCntr = keyCntr+1;
                sessionPath=unique(folder(ns.Experiment & key));
                resultsFolder = [key.subject '.' key.toolbox '.' key.tag];
                resultsFile =fullfile(sessionPath,resultsFolder,'plane0','ops.npy');
                v{keyCntr} =   py.numpy.load(resultsFile,allow_pickle=true); %#ok<AGROW>
            end
            if numel(v)==1
                v =v{1};
            end

        end

        function v =  get.stat(tbl)
            % Retrieve the stats output generated by suite2p
            keyCntr = 0;
            for key =fetch(tbl*sbx.PrepParms,'*')
                keyCntr = keyCntr+1;
                sessionPath=unique(folder(ns.Experiment & key));
                resultsFolder = [key.subject '.' key.toolbox '.' key.tag];
                resultsFile =fullfile(sessionPath,resultsFolder,'plane0','stat.mat');
                load(resultsFile,'stat');
                v{keyCntr} =   [stat{:}];            %#ok<PROP>
            end
            if numel(v)==1
                v =v{1};
            end
        end

    end
    methods (Access=public)
        function v = getFolder(tbl)
            % subject.suite2p.name-of-preprocessing
            sessionPath=unique(folder(ns.Experiment & tbl));
            prep = fetch(sbx.PrepParms & tbl,'tag','toolbox');
            session =fetch(ns.Session & tbl,'subject');
            v = fullfile(sessionPath, [session.subject '.' prep.toolbox '.' prep.tag]);
            if ~exist(v,'dir')
                fprintf('Folder %s  does not exist. Is NS_ROOT set correctly?\n',v);
            end
        end


    end
    methods (Access=protected)

        function makeTuples(tbl,key)
            sessionPath=unique(folder(ns.Experiment & key));
            prep = fetch(sbx.PrepParms & key,'*');
            % Set the output folder to be
            % subject.suite2p.preprocessing
            % in the session folder
            resultsFolder = [key.subject '.' prep.toolbox '.' prep.tag];
            % Find Experiments in this session that have Scans and
            % extract the folder name (subfolder named after the
            % Experiment).
            dataFldr = file(ns.Experiment & (ns.File & 'extension=''.sbx''' & key));
            dataFldr = cellstr(strrep(dataFldr,'.mat',filesep))'; % cellstr to make py.list
            % Check that all folders exist.
            noDir = cellfun(@(x)exist(x,'dir'),dataFldr)==0;
            if any(noDir)
                dataFldr{noDir} %#ok<NOPRT>
                error('SBX file folder not found');
            end
            switch (prep.toolbox)
                case 'suite2p'
                    opts = py.suite2p.default_ops();
                    opts{'input_format'} = "sbx";
                    %replace parameters defined in the prep
                    %settings
                    fn= fieldnames(prep.parms);
                    for  f= 1:numel(fn)
                        try
                            default= opts{fn{f}};
                            pyClass =class(default);
                            prepValue =prep.parms.(fn{f});
                            if strcmpi(pyClass,'py.list') && (ischar(prepValue) || isstring(prepValue))
                                % Some options have to specified as a
                                % length 1 list of strings. If the user
                                % put a string/char in the prepParms
                                % this codes wraps it in a py.list
                                prepValue = {prepValue};
                            end
                            overruled = feval(pyClass,prepValue);
                        catch me
                            error('Parameter %s does not exist in default_ops(). Typo?',fn{f});
                        end
                        opts{fn{f}} = overruled;
                    end
                    resultsFile =fullfile(sessionPath,resultsFolder,'plane0','ops.npy');
                    if ~exist(resultsFile,'file')
                        % Create a dict with the folder information
                        if isempty(cell(opts{'fast_disk'}))
                            if opts{'delete_bin'}
                                % No fast disk specified, and not keeping the
                                % bin file save to tempname for speed.
                                % In the db, fast_disk has to be a string, not
                                % a list.
                                fastDisk = tempname;
                            else
                                %do nothing. python will default to
                                %save_path0
                            end
                        else
                            if opts{'delete_bin'}
                                % Not keeping the bin file. Use a temp
                                % subfolder in the specified fast_disk to
                                % allow mutliple concurrent runs of suite2p
                                fastDisk = tempname(string(opts{'fast_disk'}));
                            else
                                % Keeping the file, so assume that the user
                                % had a reason to specify a specific
                                % folder)
                                fastDisk = string(opts{'fast_disk'});
                            end
                        end
                        db= py.dict(pyargs('save_path0',sessionPath, ...
                            'save_folder',resultsFolder, ...
                            'data_path',py.list(dataFldr), ...
                            'fast_disk',fastDisk));

                        fprintf('Starting suite2p run_s2p at %s... this will take a while \n',datetime('now'))
                        conda = getenv('NS_CONDA');
                        if isempty(conda)
                            % Pass to InProcess python to process
                            py.suite2p.run_s2p(ops =opts,db=db);                        
                        else
                            % Calling python in-process can lead to problems
                            % with library conflicts (not so much with simple dict calls).
                            % Using a system call may be more robust to
                            % different installs. To pass the ops and db dicst we save them
                            % to a temporary file.

                            cfd = fileparts(mfilename('fullpath'));                            
                            % The python tools are in the tools folder.
                            % Temporarily go there to import  (full path
                            % did not seem to work).
                            toolsPath = fullfile(fileparts(cfd),'tools');
                            here =pwd;
                            cd(toolsPath);
                            nssbx = py.importlib.import_module('nssbx_suite2p');
                            cd (here)
                            % Save the dicts to tempfiles
                            optsFile= tempname;
                            nssbx.save_dict_to_file(opts,optsFile)
                            dbFile = tempname;
                            nssbx.save_dict_to_file(db,dbFile)
                            % The python file that will read these
                            pyWrapper= sprintf('%s/nssbx_suite2p.py',toolsPath);
                            % Construct a batch/bash command.
                            if ispc
                                % The batch command activates conda, then
                                % calls nssbx_suite2p.py to read the dicst
                                % and then call suite2p.run_s2p
                                cmd = sprintf('"%s\\nssbx_suite2p.bat" %s\\Scripts\\activate.bat %s "%s" %s %s ',toolsPath,conda,conda,pyWrapper,optsFile,dbFile);
                            else
                                cmd = sprintf('bash "%s/nssbx_suite2p.sh" %s "%s" %s %s ',toolsPath,conda,pyWrapper,optsFile,dbFile);
                            end

                            system(cmd ,'-echo')

                        end

                        % Couldn't figure out how to convert stat.npy so
                        % save it as .mat (Not using save_mat to avoid
                        % duplicating all of the fluorescence data in F.mat
                        % and I don't want to delete the .npy files because
                        % they are useful to view in the suite2p gui.
                        statFile = fullfile(sessionPath,resultsFolder,'plane0','stat.npy');
                        npyToMat(statFile);
                        fprintf('Completed at %s\n',datetime('now'));
                    else
                        fprintf('Preprocessing results already exist. Importing %s\n',resultsFile);
                    end
                    % Load the save ops.npy to extract the mean image
                    opts =py.numpy.load(resultsFile,allow_pickle=true);
                    img= single(opts.item{'meanImg'}); % Convert to single to store in DJ
                    N = double(opts.item{'nframes'});
                    fs = double(opts.item{'fs'});                    
                    tpl = mergestruct(key,struct('img',img,'folder',resultsFolder,'nrframesinsession',N,'framerate',fs));
                    insert(tbl,tpl);
                    % And make the part table that maps trials to frames
                    % for this preprocessed set.
                    make(sbx.PreprocessedTrialmap,ns.stripToPrimary(tbl,tpl))
                case 'caiman'
                    % TODO
                otherwise
                    error('Unknown preprocessing toolbox %s',prep.toolbox);
            end


        end
    end
    methods (Static)

    end
end